'use strict';var _regenerator = require('babel-runtime/regenerator');var _regenerator2 = _interopRequireDefault(_regenerator);var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} // main
var fs = require('fs');
var path = require('path');
//const { promisify } = require('util')
var promisify = require('es6-promisify');
var readFileAsync = promisify(fs.readFile);
var glob = require('glob-fs')({ gitignore: true });


// modules
var knex = require('../../db');

beforeAll(function () {
  return knex.migrate.latest();
});

afterEach(function () {
  return knex.migrate.rollback();
});

afterAll(function () {
  return knex.destroy();
});

test('schema', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {return _regenerator2.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
          expect(1).toBe(1);
          //  const sqlFiles = await glob.readdirPromise('db/verify/*.sql')
          //
          //  for (let file of sqlFiles) {
          //    const sql = await readFileAsync(file, 'utf8')
          //
          //    try {
          //      const result = await knex.raw(sql)
          //
          //      for (let row of result.rows) {
          //        for (let key in row) {
          //          expect(row[key]).toEqual(true)
          //        }
          //      }
          //
          //    } catch (err) {
          //      return Promise.reject(err)
          //    }
          //  }
        case 1:case 'end':return _context.stop();}}}, _callee, undefined);})));